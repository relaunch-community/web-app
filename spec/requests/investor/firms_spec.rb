require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/investor/firms" do
  let(:user) { create(:user, :with_admin) }

  before do
    # https://stackoverflow.com/questions/10121835/how-do-i-simulate-a-login-with-rspec
    # https://stackoverflow.com/questions/27284657/undefined-method-env-for-nilnilclass-in-setup-controller-for-warden-error
    login_as user
  end

  describe "GET /index" do
    it "renders a successful response" do
      create(:investor_firm)
      get investor_firms_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      firm = create(:investor_firm)
      get investor_firm_url(firm)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_investor_firm_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      firm = create(:investor_firm)
      get edit_investor_firm_url(firm)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      # Ref: https://github.com/thoughtbot/factory_bot/issues/359
      # None of those solutions are great
      let(:physical_location) { create(:physical_location_complete) }
      let(:valid_attributes) { attributes_for(:investor_firm).merge(physical_location_id: physical_location.id) }

      it "creates a new Investor::Firm" do
        expect {
          post investor_firms_url, params: { investor_firm: valid_attributes }
        }.to change(Investor::Firm, :count).by(1)
      end

      it "redirects to the created investor_firm" do
        post investor_firms_url, params: { investor_firm: valid_attributes }
        expect(response).to redirect_to(investor_firm_url(Investor::Firm.last))
      end
    end

    context "with invalid parameters" do
      let(:invalid_attributes) { attributes_for(:investor_firm).merge({ name: "" }) }

      it "does not create a new Investor::Firm" do
        expect {
          post investor_firms_url, params: { investor_firm: invalid_attributes }
        }.not_to change(Investor::Firm, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        invalid_attributes = attributes_for(:investor_firm).merge({ name: "" })
        post investor_firms_url, params: { investor_firm: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested investor_firm" do
        firm = create(:investor_firm)
        patch investor_firm_url(firm), params: { investor_firm: new_attributes }
        firm.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the investor_firm" do
        firm = create(:investor_firm)
        patch investor_firm_url(firm), params: { investor_firm: new_attributes }
        firm.reload
        expect(response).to redirect_to(investor_firm_url(firm))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        firm = create(:investor_firm)
        invalid_attributes = attributes_for(:investor_firm).merge({ name: "" })
        patch investor_firm_url(firm), params: { investor_firm: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested investor_firm" do
      firm = create(:investor_firm)
      expect {
        delete investor_firm_url(firm)
      }.to change(Investor::Firm, :count).by(-1)
    end

    it "redirects to the investor_firms list" do
      firm = create(:investor_firm)
      delete investor_firm_url(firm)
      expect(response).to redirect_to(investor_firms_url)
    end
  end
end
