require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/user_profile/personals" do
  # This should return the minimal set of attributes required to create a valid
  # UserProfile::Personal. As you add validations to UserProfile::Personal, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /show" do
    it "renders a successful response" do
      personal = UserProfile::Personal.create! valid_attributes
      get user_profile_personal_url(personal)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      personal = UserProfile::Personal.create! valid_attributes
      get edit_user_profile_personal_url(personal)
      expect(response).to be_successful
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested user_profile_personal" do
        personal = UserProfile::Personal.create! valid_attributes
        patch user_profile_personal_url(personal), params: { user_profile_personal: new_attributes }
        personal.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the user_profile_personal" do
        personal = UserProfile::Personal.create! valid_attributes
        patch user_profile_personal_url(personal), params: { user_profile_personal: new_attributes }
        personal.reload
        expect(response).to redirect_to(user_profile_personal_url(personal))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        personal = UserProfile::Personal.create! valid_attributes
        patch user_profile_personal_url(personal), params: { user_profile_personal: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end
end
